import { AxiosRequestConfig, AxiosResponse, AxiosInstance } from 'axios';

export type OptionsFactory = (...args: any[]) => AxiosRequestConfig;

export interface IParams<R> {
    axios?: AxiosInstance;
    url?: string;
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'PATCH';
    options?: AxiosRequestConfig | OptionsFactory;
    trigger?: object | string | number;
    /**
     * @deprecated Alias of `forceDispatchEffect`
     */
    filter?: () => boolean;
    forceDispatchEffect?: () => boolean;
    customHandler?: (error: null | Error, response: null | AxiosResponse<R>) => void;
}

export interface IResponseStatus<R, E> {
    response: null | AxiosResponse<R>;
    error: null | E;
    loading: boolean;
}

export interface IReturns<R, E> extends IResponseStatus<R, E> {
    /**
     * @deprecated Alias of `reFetch`
     */
    query: () => number;
    reFetch: (...args: any[]) => number;
}

declare const useAxios: <R = any, E = Error>(params: IParams<R>) => IReturns<R, E>;
export default useAxios;

export declare const axios: AxiosInstance;
